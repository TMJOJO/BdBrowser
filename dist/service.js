(()=>{"use strict";class e{static _parseType(e){switch(e){case"info":case"warn":case"error":return e;default:return"log"}}static _log(e,t,...r){e=this._parseType(e),console[e](`%c[BetterDiscord]%c %c[${t}]%c`,"color: #3E82E5; font-weight: 700;","","color: #396CB8","",...r)}static log(e,...t){this._log("log",e,...t)}static info(e,...t){this._log("info",e,...t)}static warn(e,...t){this._log("warn",e,...t)}static error(e,...t){this._log("error",e,...t)}}const t=["discord.com","canary.discord.com","ptb.discord.com"],r=[1,2];function i(){chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:r}).then((()=>{let i=[];var o;i.push({id:r[0],priority:100,condition:{initiatorDomains:t.concat([location.hostname]),regexFilter:"(http|https)://discord.com/api/webhooks/.*"},action:{type:"block"}}),i.push({id:r[1],priority:100,condition:{requestDomains:t,resourceTypes:["main_frame"]},action:{type:"modifyHeaders",responseHeaders:[{header:"Content-Security-Policy",operation:"remove",value:o}]}}),e.log("Service","Installing/updating Declarative Net Request rules..."),chrome.declarativeNetRequest.updateSessionRules({addRules:i}).then((()=>{e.log("Service","Declarative Net Request rules updated!")}))}))}function o(){e.log("Service","Removing Declarative Net Request rules."),chrome.declarativeNetRequest.updateSessionRules({removeRuleIds:r})}const s=function(){chrome.runtime.onInstalled.addListener(i),chrome.runtime.onStartup.addListener(i),chrome.runtime.onSuspend.addListener(o),chrome.runtime.onSuspendCanceled.addListener(i)};function n(t){t&&(e.log("Service","Registering onRuleMatchedDebug listener."),chrome.declarativeNetRequest.onRuleMatchedDebug.addListener(a))}function a(e){console.log(`[DEBUG] Matched rule, Initiator: ${e.request.initiator}, Requested URL ${e.request.url}`)}const c=function(){chrome.permissions.contains({permissions:["declarativeNetRequestFeedback"]},n)},u=function(){e.log("Service","Registering Message events."),chrome.runtime.onMessage.addListener((function(e,t,r){if("fetch"===e.operation)return async function(e){let t;try{let r=e.parameters.options||{},i=await fetch(e.parameters.url,r),o=await i.text();t={body:o,headers:[],ok:i.ok,redirected:i.redirected,status:i.status,statusText:i.statusText,type:i.type,url:i.url},i.headers.forEach(((e,r)=>{t.headers.push([r,e])}))}catch(e){t={error:e.toString()}}finally{return t}}(e).then((e=>r(e))),!0}))};e.log("Service","Initializing service worker..."),c(),s(),u()})();